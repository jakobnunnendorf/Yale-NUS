# Load the dataset
df = pd.read_csv('players_20.csv')

print('Out of the following columns:')
print(list(df.columns))
predictor_columns = ['height_cm', 'weight_kg', 'overall', 'player_positions', 'skill_moves', 'pace', 'shooting', 'passing', 'dribbling', 'defending', 'physic', 'gk_diving', 'gk_handling', 'gk_kicking', 'gk_reflexes', 'gk_speed', 'gk_positioning', 'attacking_crossing', 'attacking_finishing', 'attacking_heading_accuracy', 'attacking_short_passing', 'attacking_volleys', 'skill_dribbling', 'skill_curve', 'skill_fk_accuracy', 'skill_long_passing', 'skill_ball_control', 'movement_acceleration', 'movement_sprint_speed', 'movement_agility', 'movement_reactions', 'movement_balance', 'power_shot_power', 'power_jumping', 'power_stamina', 'power_strength', 'power_long_shots', 'mentality_aggression', 'mentality_interceptions', 'mentality_positioning', 'mentality_vision', 'mentality_penalties', 'mentality_composure', 'defending_marking', 'defending_standing_tackle', 'defending_sliding_tackle', 'goalkeeping_diving', 'goalkeeping_handling', 'goalkeeping_kicking', 'goalkeeping_positioning', 'goalkeeping_reflexes']
print(f'There are {len(predictor_columns)} interesting predictors')
print(predictor_columns)

# Create separate DataFrames for each position
goalie_df = df[df['player_positions'].isin(goal_keeper_positions)]
defender_df = df[df['player_positions'].isin(defender_positions)]
midfielder_df = df[df['player_positions'].isin(midfielder_positions)]
striker_df = df[df['player_positions'].isin(striker_positions)]



# Select relevant goalkeeper attributes
goalie_attributes = ['overall', 'gk_diving', 'gk_handling', 'gk_kicking', 'gk_reflexes', 'gk_speed', 'gk_positioning', 'height_cm', 'weight_kg' ]

# Create a new DataFrame with only relevant attributes for goalkeepers
goalie_relevant_df = goalie_df[goalie_attributes]


# Calculate the correlation matrix for goalkeepers
goalie_corr_matrix = goalie_relevant_df.corr()

# Select only the 'overall' column from the correlation matrix
goalie_overall_corr = goalie_corr_matrix['overall']


# Sort the correlations in descending order
sorted_goalie_overall_corr = goalie_overall_corr.sort_values(ascending=False)

# Remove the 'overall' correlation with itself
sorted_goalie_overall_corr = sorted_goalie_overall_corr.drop('overall')

# Plot the correlations as a bar chart
plt.figure(figsize=(12, 8))
sns.barplot(x=sorted_goalie_overall_corr.values, y=sorted_goalie_overall_corr.index)
plt.xlabel('Correlation with Overall Rating for Goalkeepers')
plt.ylabel('Goalkeeper Attributes')
plt.title('Correlation between Goalkeeper Attributes and Overall Rating')
plt.show()


The low correlation between 'height_cm' and 'weight_kg' with the overall rating for goalkeepers might be due to the fact that physical attributes are not the primary factors affecting a goalkeeper's performance. Goalkeepers rely more on their reflexes, positioning, handling, and diving abilities, which can overshadow the impact of their height and weight.

To visualize the relationship between 'height_cm', 'weight_kg', and the overall rating, we created a scatter plots.

# Add 'height_cm' and 'weight_kg' to the goalie_attributes list
goalie_attributes = ['overall', 'gk_diving', 'gk_handling', 'gk_kicking', 'gk_reflexes', 'gk_speed', 'gk_positioning', 'height_cm', 'weight_kg']

# Update the DataFrame with the new attributes
goalie_relevant_df = goalie_df[goalie_attributes]

# Create scatter plots for height and overall rating
plt.figure(figsize=(12, 6))
sns.scatterplot(x='height_cm', y='overall', data=goalie_relevant_df)
plt.xlabel('Height (cm)')
plt.ylabel('Overall Rating')
plt.title('Relationship between Height and Overall Rating for Goalkeepers')
plt.show()

# Create scatter plots for weight and overall rating
plt.figure(figsize=(12, 6))
sns.scatterplot(x='weight_kg', y='overall', data=goalie_relevant_df)
plt.xlabel('Weight (kg)')
plt.ylabel('Overall Rating')
plt.title('Relationship between Weight and Overall Rating for Goalkeepers')
plt.show()


Since the correlation is low, we do not observe no clear pattern or trend in the scatter plots. This further supports the idea that height and weight may not be the primary factors affecting a goalkeeper's overall rating.

### **MIDFIELDERS**

# Select relevant midfielder attributes
midfielder_attributes = ['overall', 'height_cm', 'weight_kg', 'skill_moves', 'pace', 'shooting', 'passing', 'dribbling', 'defending', 'physic', 'attacking_crossing', 'attacking_finishing', 'attacking_heading_accuracy', 'attacking_short_passing', 'attacking_volleys', 'skill_dribbling', 'skill_curve', 'skill_fk_accuracy', 'skill_long_passing', 'skill_ball_control', 'movement_acceleration', 'movement_sprint_speed', 'movement_agility', 'movement_reactions', 'movement_balance', 'power_shot_power', 'power_jumping', 'power_stamina', 'power_strength', 'power_long_shots', 'mentality_aggression', 'mentality_interceptions', 'mentality_positioning', 'mentality_vision', 'mentality_penalties', 'mentality_composure', 'defending_marking', 'defending_standing_tackle', 'defending_sliding_tackle']

# Create a new DataFrame with only relevant attributes for midfielders
midfielder_relevant_df = midfielder_df[midfielder_attributes]


# Calculate the correlation matrix for midfielders
midfielder_corr_matrix = midfielder_relevant_df.corr()

# Select only the 'overall' column from the correlation matrix
midfielder_overall_corr = midfielder_corr_matrix['overall']


# Sort the correlations in descending order
sorted_midfielder_overall_corr = midfielder_overall_corr.sort_values(ascending=False)

# Remove the 'overall' correlation with itself
sorted_midfielder_overall_corr = sorted_midfielder_overall_corr.drop('overall')

# Plot the correlations as a bar chart
plt.figure(figsize=(12, 8))
sns.barplot(x=sorted_midfielder_overall_corr.values, y=sorted_midfielder_overall_corr.index)
plt.xlabel('Correlation with Overall Rating for Midfielders')
plt.ylabel('Midfielder Attributes')
plt.title('Correlation between Midfielder Attributes and Overall Rating')
plt.show()


we pick only the main attributes

# Select relevant main attributes
main_attributes = ['overall', 'height_cm', 'weight_kg', 'pace', 'shooting', 'passing', 'dribbling', 'defending', 'physic']

# Create a new DataFrame with only relevant attributes
defender_relevant_df = defender_df[main_attributes]
midfielder_relevant_df = midfielder_df[main_attributes]
striker_relevant_df = striker_df[main_attributes]

# Calculate the correlation matrix for midfielders
midfielder_corr_matrix = midfielder_relevant_df.corr()

# Select only the 'overall' column from the correlation matrix
midfielder_overall_corr = midfielder_corr_matrix['overall']

# Sort the correlations in descending order
sorted_midfielder_overall_corr = midfielder_overall_corr.sort_values(ascending=False)

# Remove the 'overall' correlation with itself
sorted_midfielder_overall_corr = sorted_midfielder_overall_corr.drop('overall')

# Plot the correlations as a bar chart
plt.figure(figsize=(12, 8))
sns.barplot(x=sorted_midfielder_overall_corr.values, y=sorted_midfielder_overall_corr.index)
plt.xlabel('Correlation with Overall Rating for midfielders')
plt.ylabel('midfielder Attributes')
plt.title('Correlation between midfielder Attributes and Overall Rating')
plt.show()

# Calculate the correlation matrix for defenders
defender_corr_matrix = defender_relevant_df.corr()

# Select only the 'overall' column from the correlation matrix
defender_overall_corr = defender_corr_matrix['overall']


# Sort the correlations in descending order
sorted_defender_overall_corr = defender_overall_corr.sort_values(ascending=False)

# Remove the 'overall' correlation with itself
sorted_defender_overall_corr = sorted_defender_overall_corr.drop('overall')

# Plot the correlations as a bar chart
plt.figure(figsize=(12, 8))
sns.barplot(x=sorted_defender_overall_corr.values, y=sorted_defender_overall_corr.index)
plt.xlabel('Correlation with Overall Rating for Defenders')
plt.ylabel('Defender Attributes')
plt.title('Correlation between Defender Attributes and Overall Rating')
plt.show()

# Calculate the correlation matrix for strikers
striker_corr_matrix = striker_relevant_df.corr()

# Select only the 'overall' column from the correlation matrix
striker_overall_corr = striker_corr_matrix['overall']


# Sort the correlations in descending order
sorted_striker_overall_corr = striker_overall_corr.sort_values(ascending=False)

# Remove the 'overall' correlation with itself
sorted_striker_overall_corr = sorted_striker_overall_corr.drop('overall')

# Plot the correlations as a bar chart
plt.figure(figsize=(12, 8))
sns.barplot(x=sorted_striker_overall_corr.values, y=sorted_striker_overall_corr.index)
plt.xlabel('Correlation with Overall Rating for Strikers')
plt.ylabel('Striker Attributes')
plt.title('Correlation between Striker Attributes and Overall Rating')
plt.show()


## **We used a linear regression model to predict the overall rating based on the identified key attributes. **

import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

Combine all position-specific DataFrames into one:



combined_df = pd.concat([ defender_relevant_df, midfielder_relevant_df, striker_relevant_df])


Prepare the dataset for training and testing:

# Select the key attributes you identified earlier as features (X) and overall rating as the target (y)
X = combined_df.drop(columns=['overall'])
y = combined_df['overall']

# Split the data into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


Create and train the linear regression model:

# Create a linear regression model
model = LinearRegression()

# Train the model using the training data
model.fit(X_train, y_train)


# Make predictions using the test data
y_pred = model.predict(X_test)


# Calculate the mean squared error
mse = mean_squared_error(y_test, y_pred)

# Calculate the R^2 score
r2 = r2_score(y_test, y_pred)

print(f"Mean squared error: {mse:.2f}")
print(f"R^2 score: {r2:.2f}")


# Display the coefficients for each feature
coef_df = pd.DataFrame({'Attribute': X.columns, 'Coefficient': model.coef_})
coef_df = coef_df.sort_values(by='Coefficient', ascending=False)
print(coef_df)
